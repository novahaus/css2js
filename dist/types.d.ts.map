{"mappings":"ACyCA,qBAA2B,WAAW,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,iBAUjE","sources":["src/src/parser.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,"/// <reference types=\"node\" />\nimport { readFile, writeFile } from \"node:fs/promises\";\nimport path from \"path\";\nimport { program } from \"commander\";\nimport { Buffer } from \"node:buffer\";\nimport { parse } from \"./parser\";\n\nprogram\n  .version(\"1.0.0\")\n  .description(\"A CLI form convert css to js\")\n  .parse(process.argv);\n\nprogram.parse();\nconst [entriesFile, outputFile] = program.args;\n\nasync function getFileContent(pathFile: string): Promise<string | undefined> {\n  try {\n    const filePath = new URL(\n      path.resolve(pathFile),\n      import.meta.url\n    );\n    const contents = await readFile(filePath, { encoding: \"utf8\" });\n\n    return contents;\n  } catch (err) {\n    if (err instanceof Error) throw new Error(err.message);\n  }\n}\n\nasync function writeJsFile(content: string, outputPath: string): Promise<void> {\n  const controller = new AbortController();\n  const { signal } = controller;\n\n  const output = new Uint8Array(Buffer.from(`module.exports=${content}`));\n  const file = writeFile(path.resolve(outputPath), output, {\n    signal,\n  });\n\n  await file;\n}\n\nexport async function main(entriesFile: string, outputFile: string) {\n  try {\n    const code = await getFileContent(entriesFile);\n    if (!code) return;\n\n    const parseContent = parse(code);\n    await writeJsFile(JSON.stringify(parseContent), outputFile);\n  } catch (err) {\n    if (err instanceof Error) throw new Error(err.message);\n  }\n}\n\nmain(\n  entriesFile,\n  !!outputFile ? outputFile : entriesFile.replace(\".css\", \".js\")\n);\n"],"names":[],"version":3,"file":"types.d.ts.map"}