{"mappings":"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","sources":["src/index.ts","src/parser.ts"],"sourcesContent":["/// <reference types=\"node\" />\nimport { readFile, writeFile } from \"node:fs/promises\";\nimport path from \"path\";\nimport { program } from \"commander\";\nimport { Buffer } from \"node:buffer\";\nimport { parse } from \"./parser\";\n\nprogram\n  .version(\"1.0.0\")\n  .description(\"A CLI form convert css to js\")\n  .parse(process.argv);\n\nprogram.parse();\nconst [entriesFile, outputFile] = program.args;\n\nasync function getFileContent(pathFile: string): Promise<string | undefined> {\n  try {\n    const filePath = new URL(\n      path.resolve(pathFile),\n      import.meta.url\n    );\n    const contents = await readFile(filePath, { encoding: \"utf8\" });\n\n    return contents;\n  } catch (err) {\n    if (err instanceof Error) throw new Error(err.message);\n  }\n}\n\nasync function writeJsFile(content: string, outputPath: string): Promise<void> {\n  const controller = new AbortController();\n  const { signal } = controller;\n\n  const output = new Uint8Array(Buffer.from(`module.exports=${content}`));\n  const file = writeFile(path.resolve(outputPath), output, {\n    signal,\n  });\n\n  await file;\n}\n\nexport async function main(entriesFile: string, outputFile: string) {\n  try {\n    const code = await getFileContent(entriesFile);\n    if (!code) return;\n\n    const parseContent = parse(code);\n    await writeJsFile(JSON.stringify(parseContent), outputFile);\n  } catch (err) {\n    if (err instanceof Error) throw new Error(err.message);\n  }\n}\n\nmain(\n  entriesFile,\n  !!outputFile ? outputFile : entriesFile.replace(\".css\", \".js\")\n);\n","import css, { Declaration, FontFace, Media, Node, Rule } from \"css\";\nimport { camelCase } from \"lodash\";\n\ntype StyleRule = Record<string, string>;\n\ntype Style = Record<string, StyleRule | string>;\n\nfunction removeCommentDeclarations(declarations: Declaration[]) {\n  return declarations.filter(\n    (declaration) => declaration.type === \"declaration\"\n  );\n}\n\nfunction isCSSVariable(value: string): boolean {\n  return value.startsWith(\"--\");\n}\n\nfunction capitalize(value: string): string {\n  return value.charAt(0).toUpperCase() + value.slice(1);\n}\n\nfunction getDeclarationKey(declarationProperty: string): string {\n  if (isCSSVariable(declarationProperty))\n    return `-${capitalize(camelCase(declarationProperty))}`;\n\n  return camelCase(declarationProperty);\n}\n\nfunction saniziteDeclarationRule(value: string): string {\n  return value.trimEnd();\n}\n\nfunction parseDeclarations(declarations: Declaration[]): Style {\n  const filteredDeclarations = removeCommentDeclarations(declarations);\n\n  return filteredDeclarations.reduce<Style>((acc, declaration) => {\n    if (!declaration.property || !declaration.value) return acc;\n\n    const declarationProperty = getDeclarationKey(declaration.property);\n    const declarationValue = saniziteDeclarationRule(declaration.value);\n\n    acc[declarationProperty] = declarationValue;\n    return acc;\n  }, {});\n}\n\nfunction parseRule(\n  selectors: string[],\n  declarations: Declaration[],\n  rules: Style\n): Style {\n  const key = selectors.join(\",\");\n  if (rules[key]) {\n    const rulesAtKey = rules[key] as StyleRule;\n    return {\n      [key]: {\n        ...rulesAtKey,\n        ...parseDeclarations(declarations),\n      },\n    } as Style;\n  }\n\n  return {\n    [key]: parseDeclarations(declarations),\n  } as Style;\n}\n\nfunction nestMediaQueryRules(\n  mediaSelector: string,\n  mediaRules: Style,\n  rules: Style\n): Style {\n  return Object.keys(mediaRules).reduce<Style>((acc, selector) => {\n    acc[selector] = Object.assign({}, acc[selector], {\n      [mediaSelector]: mediaRules[selector],\n    });\n\n    return acc;\n  }, rules);\n}\n\nfunction parseNodes(nodes: Node[]): Style {\n  return nodes.reduce<Style>((acc, node) => {\n    if (node.type === \"rule\") {\n      const rule = <Rule>node;\n\n      if (!rule.selectors || !rule.declarations) return acc;\n\n      const parsedRule = parseRule(rule.selectors, rule.declarations, acc);\n\n      acc = { ...acc, ...parsedRule };\n    }\n\n    if (node.type === \"font-face\") {\n      const rule = <FontFace>node;\n\n      if (!rule.declarations) return acc;\n\n      const parsedRule = parseRule([\"@font-face\"], rule.declarations, acc);\n\n      acc = { ...acc, ...parsedRule };\n    }\n\n    if (node.type === \"media\") {\n      const media = <Media>node;\n\n      if (!media.rules) return acc;\n\n      const mediaRules = parseNodes(media.rules);\n      const mediaSelector = `@media ${media.media}`;\n\n      acc = nestMediaQueryRules(mediaSelector, mediaRules, acc);\n    }\n    return acc;\n  }, {});\n}\n\nexport function parse(style: string) {\n  var { stylesheet } = css.parse(style);\n\n  if (!stylesheet) return {};\n\n  return parseNodes(stylesheet.rules);\n}\n"],"names":[],"version":3,"file":"main.cjs.map"}